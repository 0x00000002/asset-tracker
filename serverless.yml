# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: tknff
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: asset-tracker
# "service" is the name of this project. This will also be added to your AWS resource names.
service: FV

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    transfersTable: ${self:service}-transfers-found
    processedBlocksTable: ${self:service}-processed-blocks
    trackingTable: ${self:service}-tracking-data
    graphqlEndpoint: "https://rootnet-mainnet.hasura.app/v1/graphql"
    rootRPC: "wss://root.rootnet.live/archive/ws"
    transferLimit: 1000

functions:
  asset-tracker:
    handler: handler.handler
    events:
      - schedule: rate(1 hour)  
    timeout: 60
    iamRoleStatementsName: my-custom-role-name
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
    environment:
      REGION: ${self:provider.region}
      LAST_PROCESSED_BLOCK_TABLE: ${self:provider.environment.processedBlocksTable}
      TRANSFERS_TABLE: ${self:provider.environment.transfersTable}
      TRACKING_TABLE: ${self:provider.environment.trackingTable}
      HASURA_ENDPOINT: ${self:provider.environment.graphqlEndpoint}
      TG_CREDENTIALS: ${self:custom.supersecret}
      ROOT_RPC: ${self:provider.environment.rootRPC}
      TRANSFER_LIMIT: ${self:provider.environment.transferLimit}

custom:
  supersecret: ${ssm(raw):/aws/reference/secretsmanager/fv/asset-tracker/tgBotCredentials}

resources: 
      Resources:
        transfersTable:
          Type: AWS::DynamoDB::Table
          Properties:
            TableName: ${self:provider.environment.transfersTable}
            AttributeDefinitions:
              - AttributeName: id
                AttributeType: S
              - AttributeName: from
                AttributeType: S
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: from
                KeyType: RANGE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        processedBlocksTable:
          Type: AWS::DynamoDB::Table
          Properties:
            TableName: ${self:provider.environment.processedBlocksTable}
            AttributeDefinitions:
              - AttributeName: chain
                AttributeType: S
            KeySchema:
              - AttributeName: chain
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1              
        trackingTable:
          Type: AWS::DynamoDB::Table
          Properties:
            TableName: ${self:provider.environment.trackingTable}
            AttributeDefinitions:
              - AttributeName: type
                AttributeType: S
              - AttributeName: address
                AttributeType: S
            KeySchema:
              - AttributeName: type
                KeyType: HASH
              - AttributeName: address
                KeyType: RANGE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1                   